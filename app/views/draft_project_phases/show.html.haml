:css
  table.dataTable thead .sorting, 
  table.dataTable thead .sorting_asc, 
  table.dataTable thead .sorting_desc {
      background : none;
  }

:javascript
  $(document).ready(function () {

    $('.assetTable').DataTable({
      'columnDefs': [ {
          'targets': 0, /* table column index */
          'orderable': false, /* true or false */
       }]
    });

    // This controls the year dropdown in each asset table
    $(".assetReplacementYear").change(function(){
      var object_key = $(this).attr("id");
      var year = $(this).val();
      var display_year = $(this).children("option:selected").text();
      $("#" + object_key + "Cell").html("Moved to: " + display_year);
      moveTo(object_key, year, this);
    });

  });


  function moveTo(object_key, year, element){
    $.ajax({
      url: '/draft_project_phase_assets/' + object_key + '/move_to',
      data: {'fy_year': year, 'object_key': object_key},
      type: 'PUT',
      success: function(result) {
        console.log("Updated Year");
      }
    });
  }

//TITLE
.row.text-center
  %h1
    =@draft_project_phase.name 
  .row
    =@draft_project_phase.cost_justification
  .row
    =link_to edit_draft_project_phase_path(@draft_project_phase) do 
      %i.fa.fa-edit
    = link_to draft_project_phase_path(@draft_project_phase), :method => :delete, :class => "btn btn-xs btn-action", :data => { :confirm => 'Are you sure you want to remove this project phase?' } do
      %i.fa.fa-trash

//Main Content  
.row
  .col-md-1
  
  //Details
  .col-md-3
    .row
      %strong 
        ALI:
      =@draft_project_phase.team_ali_code.try(:code)
    .row 
      %strong 
        Count:
      =@draft_project_phase.get_count 
    .row
      %strong
        =@draft_project_phase.cost_estimated ? "Cost (e):" : "Cost"
      =format_as_currency(@draft_project_phase.cost)
    .row.allocated
      %strong
        Allocated:
      =format_as_currency(@draft_project_phase.allocated)
    .row.remaining
      %strong
        Remaining:
      =format_as_currency(@draft_project_phase.remaining)
  .col-md-4
    .progress
      .progress-bar.bg-success{role: "progressbar", style: "width: #{@draft_project_phase.percent_funded}%"}
        ="#{@draft_project_phase.percent_funded}% Funded"

  .col-md-4


%div.row
  .col-md-12
    %h3#funding-section
      ="Funding"
%hr

%div.row
  -count = 0
  -@draft_project_phase.draft_funding_requests.order(:created_at).each do |funding_request|
    .row
      .col-md-2
      .col-md-8
        -if @draft_project_phase.draft_funding_requests.count > 1
          %h4
            =link_to draft_funding_request_path(funding_request), method: :delete, data: {confirm: "Are you sure you want to delete this Funding Request?"} do
              %i.fa.fa-trash
            ="Funding Request #{count+=1}"
        =render partial: "shared/draft_funding_request_partial", locals: {funding_request: funding_request, budgets: @draft_budgets}

// Funding
%div.row
  .col-md-12.text-center
    %h4
      ="Funding Request"
      =link_to draft_funding_requests_url(draft_project_phase_id: @draft_project_phase.object_key), method: :post, class: "btn btn-info btn-xs" do
        %i.fa.fa-plus

// Milestones
%div.row
  .col-md-12
    %h3#milestones-section
      ="Milestones"
    %hr
    .row
      =render partial: "milestones", locals: {phase: @draft_project_phase}

// Assets
%div.row
  .col-md-12
    %h3
      ="Assets"
    %hr
=render partial: "phase_assets_table", locals: {draft_project_phase: @draft_project_phase}

:javascript
    // keep track of remaining funds to allocate
    let remaining_allocation = parseFloat("#{@draft_project_phase.remaining}");

    // update allocation with an ajax call
    // send new allocation amount back to server
    $(document).on("click", ".confirm_edit",(x) => {

      let id = $(x.target).closest(".alloc_actions").attr("data_id");
      let value = Math.floor(parseFloat($(x.target).closest(".allocation_row").find("input.edit").val()) || 0).toString();
      let root = $(x.target).closest(".dfrp");  // dfrp is a class at the root of the draft_funding_request_partial

      let old_value = parseFloat($(x.target).closest(".allocation_row").find(".unedit").text().replace(/[^\d\.\-eE+]/g, ""));
      if (parseFloat(value) >= 0 && remaining_allocation + (old_value - parseFloat(value)) >= 0) {

        $.ajax({
          url: "/draft_budget_allocations/"+id,
          data: {"draft_budget_allocation": {"amount":value}},
          method: 'PUT',
          dataType: 'json',
          success: function(data) {
            console.log("updated allocation");

            let allocationTotal = sum_a($(root).find(".unedit"));
            let grandTotal = parseFloat(sum_a($(".unedit")));

            $(root).find(".unedit").each(function(alloc) {
              let actual = (100*(parseFloat($(this).text().replace(/[^\d\.\-eE+]/g, ""))/parseFloat(sum_a($(root).find(".unedit")))));
              // update actual %
              $(this).parent().siblings(".alloc_actual").html((actual.toFixed(3) || 0) + "%");
            });

            // let actual = (100*(value/total));

            // update actual %
            // $(x.target).parent().siblings(".alloc_actual").html(actual.toFixed(3) + "%");

            // update totals
            $(root).find(".fr_total").html('$' + allocationTotal.toLocaleString());
            let allocatedHtmlArr = $(".allocated").html().split("\n");
            let remainingHtmlArr = $(".remaining").html().split("\n");
            allocatedHtmlArr[4] = '$' + grandTotal.toLocaleString();
            remainingHtmlArr[4] = '$' + remaining_allocation.toLocaleString();
            $(".allocated").html(allocatedHtmlArr.join("\n"));
            $(".remaining").html(remainingHtmlArr.join("\n"));
            let percentFunded = Math.round(100*(grandTotal/parseFloat('#{@draft_project_phase.cost}')));
            if (percentFunded == 100 && remaining_allocation > 0) {
              percentFunded = 99;
            }
            $(".progress-bar").css("width", percentFunded.toLocaleString() + "%");
            $(".progress-bar").text("\n" + percentFunded.toLocaleString() + "% Funded\n");
          },
          error: function(e) {
            console.log(e);
          }
        });
      }
    });



    // toggle the controls for the related allocation
    $(document).on("click", "input.toggle_edit", (x)=>{
      let initial_val = parseFloat($(x.target).siblings(".unedit").text().replace(/[^\d\.\-eE+]/g, "") || "0");

      if($(x.target).is(":not(:checked)")){ // close edit
        let updated_val = Math.floor(parseFloat($(x.target).siblings("input.edit").val() || "0"));
        let allocation_delta = initial_val - updated_val;
        if (updated_val < 0) {
          alert("Allocated value can not be a negative number.");
          $(x.target).prop("checked", true);
        } else if (remaining_allocation + allocation_delta < 0) {
          alert("Allocated value can not exceed remaining cost. Please enter a value no higher than " + (initial_val + remaining_allocation) + ".");
          $(x.target).prop("checked", true);
        } else {
          $(x.target).siblings(".unedit").text('$' + updated_val.toLocaleString());// update static alloc amount, formatted

          remaining_allocation += (initial_val - updated_val); // update remaining allocation according to the amount changed

          $(x.target).siblings().toggle(); // swap text box and span
          $(x.target).closest(".allocation_row").find(".alloc_actions").children().toggle(); // swap the edit, lock, and trash icons, for the 'done editting' checkmark
        }
      } else { // open edit
        if (initial_val <= 0) {
          $(x.target).siblings("input.edit").val(remaining_allocation); // textbox gets static value, stripped
        } else {
          $(x.target).siblings("input.edit").val(initial_val); // textbox gets static value, stripped
        }
        $(x.target).siblings().toggle(); // swap text box and span
        $(x.target).closest(".allocation_row").find(".alloc_actions").children().toggle(); // swap the edit, lock, and trash icons, for the 'done editting' checkmark
      }
    });

    // Trigger Edit Allocation
    $(document).on("click", ".trigger_toggle_edit", (x)=>{
      $(x.target).closest(".allocation_row").find("input.toggle_edit").click(); // toggle the hidden checkbox, which controls the editting of the related allocation
    });

    // Trigger Cancel
    $(document).on("click", ".cancel_edit", (x)=>{
      let root = $(x.target).closest(".allocation_row")
      root.find("input.edit").val(root.find(".unedit").text().replace(/[^\d\.\-eE+]/g, "").toLocaleString()); // reset the textbox
      root.find("input.toggle_edit").click(); 
    });

    // helper to update, generates the total
    let sum_a = (l) => {
      let sum = 0;
      l.each(function(){
        sum += parseFloat($(this).text().replace(/[^\d\.\-eE+]/g, "") || "0");
      });
      return sum;
    };


    // lock allocation
    $(document).on("click", ".alloc_lock", (x)=>{

      let root = $(x.target).closest(".allocation_row");
      let old_total = parseFloat($(root).closest(".dfrp").find(".unedit_total").text().replace(/[^\d\.\-eE+]/g, ""));
      let amount = Math.floor(parseFloat($(root).find("input.edit").val()) || 0).toString();
      let effectivePct = parseFloat($(root).find("div")[2].innerText) / 100;
      let id = $(x.target).data("allocationId");
      let objectKey = $(x.target).data("objectKey");

      if (parseFloat(amount) < 0) {
        alert("Allocated value can not be a negative number.");
      } else if (Math.round(parseFloat(amount)/effectivePct) > Math.round(old_total + remaining_allocation)) {
        alert("Locking the entered allocation would result in a total of $" + Math.round(parseFloat(amount)/effectivePct) +
          " being applied to this funding request, which exceeds the remaining project cost. " +
          "Please enter a value no higher than " + Math.floor((old_total + remaining_allocation) * effectivePct) + " for this allocation.");
      } else {
        // Make Call to Update the Total
        $.ajax({
          url: "/draft_budget_allocations/"+id+"/lock_me",
          data: {"amount":amount,"allocation_id":objectKey},
          method: 'PATCH',
          dataType: 'json',
          success: function(data) {
            location.reload();
          },
          error: function(e) {
            console.log(e);
          }
        });
      }
    });



    // Edit Total
    // Toggle controls for editting the funding request total
    $(document).on('click', "input.toggle_edit_total", (x)=>{
      if($(x.target).is(":not(:checked)")){ // close edit
        let updated_total = Math.floor(parseFloat($(x.target).siblings("input.edit_total").val() || "0"));
        if (updated_total < 0) {
          alert("Total allocation can not be a negative number.");
          $(x.target).prop("checked", true);
        } else if (updated_total > remaining_allocation + parseFloat($(x.target).siblings(".unedit_total").text().replace(/[^\d\.\-eE+]/g, "") || "0")) {
          alert("Total allocation can not exceed project phase cost.");
          $(x.target).prop("checked", true);
        } else {
          console.log('not Checked');
          $(x.target).siblings(".unedit_total").text('$' + parseFloat($(x.target).siblings("input.edit").val() || "0").toLocaleString()); // static gets textbox value, formatted
          //$(x.target).closest(".dfrp").find(".total_actions").children().hide();
          console.log(x.target);
          //$(x.target).closest(".dfrp").find( "#totalSpinner" ).show();
          $(x.target).siblings().toggle(); // swap the textbox and static total
        }
      } else { // open edit
        console.log('edit');
        let input_val = parseFloat($(x.target).siblings(".unedit_total").text().replace(/[^\d\.\-eE+]/g, "") || "0");
        if (input_val <= 0) {
          $($(x.target).siblings("input.edit")[0]).val(remaining_allocation); // textbox gets static value, stripped
        } else {
          $($(x.target).siblings("input.edit")[0]).val(input_val); // textbox gets static value, stripped
        }
        $(x.target).closest(".dfrp").find(".total_actions").children().toggle(); // swap the edit button, and the checkmark and cancel button
        $(x.target).siblings().toggle(); // swap the textbox and static total
      }
    });


    // Trigger Edit Total
    $(document).on("click", ".trigger_toggle_edit_total", (x)=>{
      $(x.target).closest(".dfrp").find("input.toggle_edit_total").click(); // toggle the hidden checkbox, which controls the editting of the total, of the related funding request 
    });

    // Show Spinner on Update
    $(document).on("click", ".lock_total", (x)=>{
      let root = $(x.target).closest(".dfrp");
      let total = $(root).find("input.edit.edit_total").val();

      if (parseFloat(total) >= 0 && parseFloat(total) <= remaining_allocation + parseFloat($(root).find(".unedit_total").text().replace(/[^\d\.\-eE+]/g, ""))) {
        var cancel_id = x.target.id;
        var fs_id = cancel_id.split("_")[1];
        var edit_id = "#edit_" + fs_id;
        var check_id = "#check_" + fs_id;
        var cancel_id = "#cancel_" + fs_id;
        var spinner_id = "#spinner_" + fs_id;
        $(edit_id).hide();
        $(check_id).hide();
        $(cancel_id).hide();
        $(spinner_id).show();
      }
    });


    // Trigger Cancel (Total)
    $(document).on("click", ".cancel_edit_total", (x)=>{
      var cancel_id = x.target.id;
      var fs_id = cancel_id.split("_")[1];
      var edit_id = "#edit_" + fs_id;
      var check_id = "#check_" + fs_id;
      var cancel_id = "#cancel_" + fs_id;
      $(edit_id).show();
      $(check_id).hide();
      $(cancel_id).hide();

      let root = $(x.target).closest(".dfrp");
      root.find("input.edit_total").val(root.find(".unedit_total").text().replace(/[^\d\.\-eE+]/g, "").toLocaleString()); // reset textbox
      root.find("input.toggle_edit_total").click(); // toggle the hidden checkbox, which controls the editting of the total, of the related funding request
    });

