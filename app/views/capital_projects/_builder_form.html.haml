= simple_form_for(@builder_proxy,
  :html => {:class => 'form-vertical'},
  :url => runner_capital_projects_path,
  :wrapper => :vertical_form,
  :wrapper_mappings => {:check_boxes => :vertical_radio_and_checkboxes,
  :radio_buttons => :vertical_radio_and_checkboxes,
  :file => :vertical_file_input,
  :boolean => :vertical_boolean}) do |f|

  - if @organization_list.count > 1
    .row
      .col-md-12
        = f.input :organization_id, :required => true, :collection => Organization.where(id: @organization_list), :label_method => 'coded_name'
  .row
    .col-md-6
      = f.input :asset_types, :required => true,   :collection => @asset_types.map{|type| [type[:name], type[:id]]}, :multiple => true, :as => :check_boxes, :input_html => { :checked => true }
    .col-md-6
      = f.input :start_fy, :required => true,      :collection => @fiscal_years, :label => "Starting Fiscal Year"

  - builder_warning_style = "display: none;"
  - builder_warning_style = "" if @organization_list.count == 1 && Organization.get_typed_organization(Organization.find_by(id: @organization_list.first)).has_sogr_projects?
  .row.builder-warning{style: builder_warning_style}
    .col-md-12
      = render 'builder_warning'

  = f.submit "Run analyzer...", :class => "btn btn-primary", :id => "submit_button"


:javascript
  $(function(){
    var org_id = 0;
    var asset_types = JSON.parse('#{@asset_types.to_json}');
    var current_planning_year = #{current_planning_year_year};
    var has_sogr_project_org_list = #{ (@has_sogr_project_org_list || {}).to_json.html_safe };
    var have_sogr_locked_list = #{(@has_locked_sogr_this_fiscal_year || {}).to_json.html_safe}
    var planning_year = parseInt(#{(@fiscal_years[1][1])});

    // Detect changes in the org selected
    $('#builder_proxy_organization_id').on('change', function(event) {
      var id = $(this).val();

      if (id != org_id) {
        // store the selected org
        org_id = id;

        var is_sogr_locked = $.inArray(org_id, have_sogr_locked_list);

        if(is_sogr_locked >= 0)
        {
          $("#builder_proxy_start_fy option[value='"+(planning_year)+"']").hide();
          var smaller years = planning_year-1
          while(smaller_years >= current_planning_year)
          {
            $("#builder_proxy_start_fy option[value='"+(smaller years)+"']").hide();
            smaller_years--;
          }
        }
        else{
          $("#builder_proxy_start_fy option[value='"+(planning_year)+"']").show();
          var smaller years = planning_year-1
          while(smaller_years >= current_planning_year)
          {
            $("#builder_proxy_start_fy option[value='"+(smaller years)+"']").show();
            smaller_years--;
          }
        }

        var org_has_sogr_project = has_sogr_project_org_list[org_id];
        var fy_year = current_planning_year;
        if(org_has_sogr_project) {
          $('.builder-warning').show();
          fy_year += 3;
        } else {
          $('.builder-warning').hide();
        }

        // Reset
        $('#builder_proxy_asset_type_id').val('');
        $('#builder_proxy_start_fy').val(fy_year);

        // Set asset types of org only
        for (var j = 0; j < asset_types.length; j++){
          type = asset_types[j]

          if ($.inArray( parseInt(id), type.orgs ) >= 0) {
            $('#builder_proxy_asset_types_'+type.id).parent().parent().show();
          } else {
            $('#builder_proxy_asset_types_'+type.id).parent().parent().hide(); // hide whole span
          }
        }
      }
    });


  });
