
= simple_form_for([@project, @activity_line_item],
  :html => {:class => 'form-vertical', :id => 'edit_form'},
  :remote => true,
  :wrapper => :vertical_form,
  :wrapper_mappings => {:check_boxes => :vertical_radio_and_checkboxes, :radio_buttons => :vertical_radio_and_checkboxes, :file => :vertical_file_input, :boolean => :vertical_boolean}) do |f|

  .row
    .col-sm-6
      = f.input :cost, :wrapper => :vertical_prepend, :label => "Cost Estimate" do
        %span.input-group-addon
          %i.fa.fa-usd
        = f.input_field :cost, :required => true, :input_html => {:min => 0, :integer => true}, :class => "form-control"
  .row
    .col-sm-12
      = f.input :cost_justification, :required => true, :wrapper_html => {:class => 'text-limiter-wrapper'}, :input_html => {:class => 'text-limiter', :rows => 3, :maxlength => 254}, :placeholder => "Enter a justification for this cost estimate..."
      %p.text-muted.text-limiter-counter
        %span#counter
        characters remaining.

  = f.submit :class => 'btn btn-primary'
  %button.btn.btn-default{:data => {:dismiss => "modal"}} Cancel

:javascript

  $('#activity_line_item_cost_justification').simplyCountable({
    counter: '#counter',
    maxCount: $('#activity_line_item_cost_justification').attr('maxlength'),
    strictMax: false,
    safeClass: 'text-muted',
    overClass: 'text-danger'
  });

  // validate the form before submit
  $('.simple_form').validate({
    submitHandler: function(form) {
      var diff  = parseInt($('#activity_line_item_cost').val()) - parseInt($("##{@activity_line_item.object_key}-ali-cost").data('cost'));

      $(form).ajaxSubmit({
        dataType: 'json',
        success: function(data){

          new_fy_sum = parseInt($("#fy-sum-#{@activity_line_item.fy_year}").data('cost'))+diff;
          $("#fy-sum-#{@activity_line_item.fy_year}").html(number_to_currency(new_fy_sum));
          $("#fy-sum-#{@activity_line_item.fy_year}").data('cost',new_fy_sum);

          $('div[data-ali="#{@activity_line_item.object_key}"]').html(data.new_html);

          $('#form-modal').modal('hide');
        }
      });


    }
  });

  function number_to_currency(number, options) {
    var options   = options || {};
    var precision = options["precision"] || 0;
    var unit      = options["unit"] || "$";
    var separator = precision > 0 ? options["separator"] || "." : "";
    var delimiter = options["delimiter"] || ",";

    var parts = parseFloat(number).toFixed(precision).split('.');
    if (parts[1]) {
      return unit + number_with_delimiter(parts[0], delimiter) + separator + parts[1].toString();
    } else {
      return unit + number_with_delimiter(parts[0], delimiter)
    }
  }

  function number_with_delimiter(number, delimiter, separator) {
    var delimiter = delimiter || ",";
    var separator = separator || ".";

    var parts = number.toString().split('.');
    parts[0] = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1" + delimiter);
    return parts.join(separator);
  }
